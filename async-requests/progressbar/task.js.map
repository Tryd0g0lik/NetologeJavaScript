{"version":3,"sources":["task.ts"],"names":[],"mappings":"AACA,IAAM,QAAQ,GAAmB,QAAQ,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;AAC5E,IAAM,OAAO,GAAgB,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAC7D,IAAM,CAAC,GAAoB,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAC3D,IAAM,KAAK,GAAoB,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;AAEnE,4HAA4H;AAC5H,+CAA+C;AAC/C,IAAI,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;IAC5B,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;CAC7B;AAED;IAIE,cAAY,GAAW;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;IAEtB,CAAC;IAED,+BAA+B;IAC/B,wBAAS,GAAT;QAAA,iBAuCC;QAtCC,yBAAyB;QACzB,IAAI,OAAO,GAAW,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,IAAI,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7C,IAAI,MAAM,CAAC,cAAc,EAAE;YAEzB,IAAI,CAAC,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;SAErC;aAAM,IAAI,MAAM,CAAC,aAAa,EAAE;YAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,CAAC,mBAAmB,CAAC,CAAC;SACvD;QAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,KAAK,CAAC,kDAAkD,CAAC,CAAA;SAC1D;QAAA,CAAC;QAEF,IAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAEnF,wCAAwC;QACxC,0CAA0C;QAC1C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,GAAG,UAAC,KAAU;YAC1C,KAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG;gBAChC,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU,KAAK,CAAC,EAAE;oBACjC,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;oBACxB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;oBAEnB,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,KAAK,EAAE;wBAChC,QAAQ,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;qBAElE;iBACF;YACH,CAAC,CAAA;QACH,CAAC,CAAA;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5B,4CAA4C;IAC9C,CAAC;IAED,gCAAiB,GAAjB;QAAA,iBAQC;QAPC,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,CAAC;YAClC,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,KAAI,CAAC,SAAS,EAAE,CAAC;QAGnB,CAAC,CAAC,CAAA;IAEJ,CAAC;IACH,WAAC;AAAD,CA7DA,AA6DC,IAAA;AAOD,IAAM,GAAG,GAAG,wDAAwD,CAAC;AACrE,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC","file":"task.js","sourcesContent":["\r\nconst contents = <HTMLCollection>document.getElementsByClassName('content');\r\nconst buttons = <HTMLElement>document.getElementById('send');\r\nconst f = <HTMLFormElement>document.getElementById('form');\r\nconst progr = <HTMLFormElement>document.getElementById('progress');\r\n\r\n// метод \"FormData\" используем при отправке данных ТОЛЬКО если есть строковые <input texterea полы ИЛИ при какиих условиях? \r\n//Просто не понима для чего указывать 'action'.\r\nif (f.hasAttribute('action')) {\r\n  f.removeAttribute('action');\r\n}\r\n\r\nclass Http {\r\n  url: string;\r\n  posts: string;\r\n  request: any;\r\n  constructor(url: string) {\r\n    this.url = url;\r\n    this.posts = 'POST';\r\n\r\n  }\r\n\r\n  // Создаем модель для загрузки.\r\n  modelAjax() {\r\n    // Просто копируем данные\r\n    let methods: string = Array.from([this.posts])[0];\r\n    let urls: string = Array.from([this.url])[0];\r\n\r\n    if (window.XMLHttpRequest) {\r\n\r\n      this.request = new XMLHttpRequest();\r\n\r\n    } else if (window.ActiveXObject) {\r\n      this.request = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n    }\r\n\r\n    if (!this.request) {\r\n      alert('1: You are a loser!. Your \"request\" is not worlk')\r\n    };\r\n\r\n    const formData = new FormData(f);\r\n    this.request.open(methods, urls);\r\n    this.request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\r\n\r\n    /* ------------start----------------- */\r\n    // Загрузка - получаем размер загруженного\r\n    this.request.upload.onprogress = (event: any) => {\r\n      this.request.onreadystatechange = () => {\r\n        if (this.request.readyState === 2) {\r\n          let resp = event.loaded;\r\n          progr.value = resp;\r\n\r\n          if (event.loaded === event.total) {\r\n            contents[0].insertAdjacentHTML('beforeend', 'Данные загружены!');\r\n\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.request.send(formData);\r\n    /* --------------completed--------------- */\r\n  }\r\n\r\n  giveDownloadStart() {\r\n    buttons.addEventListener('click', (e) => {\r\n      e.preventDefault();\r\n      this.modelAjax();\r\n\r\n\r\n    })\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst url = 'https://students.netoservices.ru/nestjs-backend/upload';\r\nconst http = new Http(url);\r\nhttp.giveDownloadStart();\r\n\r\n\r\n\r\n\r\n"]}